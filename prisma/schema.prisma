generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum UserRole {
  USER
  ADMIN
}

enum KnowledgeCategory {
  GEOGRAPHY_AND_HISTORY
  ENTERTAINMENT
  ARTS_AND_LITERATURE
  SCIENCE_AND_NATURE
  SPORTS_AND_LEISURE
  GENERAL_KNOWLEDGE
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         UserRole       @default(USER)
  gameHistory  GameHistory[]
  userProgress UserProgress[]
  games        Game[]
}

model Question {
  id                String            @id @default(uuid())
  question          String
  answer            String
  value             Int
  difficulty        Difficulty
  category          Category          @relation(fields: [categoryId], references: [id])
  categoryId        String
  knowledgeCategory KnowledgeCategory
  airDate           DateTime?
  season            Int?
  episodeId         String?
  wasTripleStumper  Boolean          @default(false)
  isDoubleJeopardy  Boolean          @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userProgress      UserProgress[]
  gameHistory       GameHistory[]
  games             GameQuestion[]
  tags              Tag[]             @relation("QuestionTags")
}

model Category {
  id           String         @id @default(uuid())
  name         String         @unique
  questions    Question[]
  userProgress UserProgress[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Tag {
  id        String     @id @default(uuid())
  name      String     @unique
  questions Question[] @relation("QuestionTags")
}

model GameHistory {
  id         String   @id @default(uuid())
  userId     String
  questionId String
  correct    Boolean
  points     Int      @default(0)
  timestamp  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
}

model UserProgress {
  id         String   @id @default(uuid())
  userId     String
  categoryId String
  questionId String
  correct    Int      @default(0)
  total      Int      @default(0)
  points     Int      @default(0)
  user       User     @relation(fields: [userId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])

  @@unique([userId, categoryId])
}

model Game {
  id                     String         @id @default(uuid())
  userId                 String
  user                   User           @relation(fields: [userId], references: [id])
  questions              GameQuestion[]
  useKnowledgeCategories Boolean        @default(false)
  score                  Int            @default(0)
  completed              Boolean        @default(false)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
}

model GameQuestion {
  id         String   @id @default(uuid())
  game       Game     @relation(fields: [gameId], references: [id])
  gameId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  answered   Boolean  @default(false)
  correct    Boolean?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([gameId, questionId])
}
